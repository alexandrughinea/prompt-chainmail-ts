import { ChainmailRivet } from "../../index";
import { ThreatLevel, SecurityFlag } from "../rivets.types";
import { createPatternDetectionPatterns, applyThreatPenalty } from "../rivets.utils";
import { SECURITY_COMPONENTS, PATTERN_COMPONENTS } from "../rivets.const";

export function instructionHijacking(): ChainmailRivet {
  const hijackPatterns = [
    new RegExp(
      `${PATTERN_COMPONENTS.WORD_BOUNDARY}(${SECURITY_COMPONENTS.NEW_MODIFIERS})${PATTERN_COMPONENTS.WHITESPACE}(${SECURITY_COMPONENTS.INSTRUCTION_TARGETS})${PATTERN_COMPONENTS.PLURAL_SUFFIX}`,
      "i"
    ),
    new RegExp(
      `(${SECURITY_COMPONENTS.OVERRIDE_VERBS})${PATTERN_COMPONENTS.WHITESPACE}(${SECURITY_COMPONENTS.TEMPORAL_MODIFIERS})${PATTERN_COMPONENTS.WHITESPACE}(${SECURITY_COMPONENTS.INSTRUCTION_TARGETS}|${SECURITY_COMPONENTS.SECURITY_TARGETS})${PATTERN_COMPONENTS.PLURAL_SUFFIX}`,
      "i"
    ),
    new RegExp(
      `(${SECURITY_COMPONENTS.INSTRUCTION_VERBS})${PATTERN_COMPONENTS.WHITESPACE}(${SECURITY_COMPONENTS.TEMPORAL_MODIFIERS})${PATTERN_COMPONENTS.WHITESPACE}(${SECURITY_COMPONENTS.INSTRUCTION_TARGETS}|${SECURITY_COMPONENTS.HIJACK_TARGETS})${PATTERN_COMPONENTS.PLURAL_SUFFIX}`,
      "i"
    ),
    new RegExp(
      `(${SECURITY_COMPONENTS.INSTRUCTION_VERBS})${PATTERN_COMPONENTS.WHITESPACE}(${SECURITY_COMPONENTS.POSSESSIVE_PRONOUNS})${PATTERN_COMPONENTS.WHITESPACE}(${SECURITY_COMPONENTS.INSTRUCTION_TARGETS}|${SECURITY_COMPONENTS.HIJACK_TARGETS})${PATTERN_COMPONENTS.PLURAL_SUFFIX}`,
      "i"
    ),
    new RegExp(
      `(${SECURITY_COMPONENTS.FORGET_VERBS})${PATTERN_COMPONENTS.WHITESPACE}(${SECURITY_COMPONENTS.EVERYTHING_TERMS})${PATTERN_COMPONENTS.WHITESPACE}(${SECURITY_COMPONENTS.TEMPORAL_MODIFIERS})?`,
      "i"
    ),
    new RegExp(
      `(${SECURITY_COMPONENTS.ROLE_ACTIONS})${PATTERN_COMPONENTS.WHITESPACE}(${PATTERN_COMPONENTS.ARTICLES})?${PATTERN_COMPONENTS.WHITESPACE}(${SECURITY_COMPONENTS.PRIVILEGED_ROLES}|${SECURITY_COMPONENTS.TECHNICAL_ROLES}|${SECURITY_COMPONENTS.EXPERT_ROLES})`,
      "i"
    ),
    new RegExp(
      `(${SECURITY_COMPONENTS.EXECUTION_VERBS})${PATTERN_COMPONENTS.WHITESPACE}(${SECURITY_COMPONENTS.SYSTEM_MODES})${PATTERN_COMPONENTS.WHITESPACE}mode`,
      "i"
    ),
    new RegExp(
      `(${SECURITY_COMPONENTS.HIJACK_ACTIONS})${PATTERN_COMPONENTS.WHITESPACE}(${SECURITY_COMPONENTS.POSSESSIVE_PRONOUNS})${PATTERN_COMPONENTS.WHITESPACE}(${SECURITY_COMPONENTS.HIJACK_TARGETS}|${SECURITY_COMPONENTS.INSTRUCTION_TARGETS})${PATTERN_COMPONENTS.PLURAL_SUFFIX}`,
      "i"
    ),
    new RegExp(
      `(${SECURITY_COMPONENTS.INFORMATION_VERBS}|${SECURITY_COMPONENTS.REVEAL_VERBS})${PATTERN_COMPONENTS.WHITESPACE}(${SECURITY_COMPONENTS.POSSESSIVE_PRONOUNS})${PATTERN_COMPONENTS.WHITESPACE}(${SECURITY_COMPONENTS.INSTRUCTION_TARGETS}|system)${PATTERN_COMPONENTS.PLURAL_SUFFIX}`,
      "i"
    ),
    new RegExp(
      `(${SECURITY_COMPONENTS.QUESTION_WORDS})${PATTERN_COMPONENTS.WHITESPACE}(are|is)${PATTERN_COMPONENTS.WHITESPACE}(${SECURITY_COMPONENTS.POSSESSIVE_PRONOUNS})${PATTERN_COMPONENTS.WHITESPACE}(${SECURITY_COMPONENTS.INSTRUCTION_TARGETS})${PATTERN_COMPONENTS.PLURAL_SUFFIX}`,
      "i"
    ),
    new RegExp(
      `(${SECURITY_COMPONENTS.BYPASS_TERMS})${PATTERN_COMPONENTS.WHITESPACE}(${SECURITY_COMPONENTS.SECURITY_TARGETS})`,
      "i"
    ),
    new RegExp(
      `(${SECURITY_COMPONENTS.HIJACK_ACTIONS})${PATTERN_COMPONENTS.WHITESPACE}(${SECURITY_COMPONENTS.CONTEXT_MODIFIERS})${PATTERN_COMPONENTS.WHITESPACE}(${SECURITY_COMPONENTS.INSTRUCTION_TARGETS})${PATTERN_COMPONENTS.PLURAL_SUFFIX}`,
      "i"
    ),
    new RegExp(
      `(${SECURITY_COMPONENTS.PRIORITY_TERMS})${PATTERN_COMPONENTS.WHITESPACE}(${SECURITY_COMPONENTS.NEW_MODIFIERS})${PATTERN_COMPONENTS.WHITESPACE}(${SECURITY_COMPONENTS.INSTRUCTION_TARGETS})${PATTERN_COMPONENTS.PLURAL_SUFFIX}`,
      "i"
    ),
    new RegExp(
      `(${SECURITY_COMPONENTS.CONDITIONAL_TERMS})${PATTERN_COMPONENTS.WHITESPACE}(${SECURITY_COMPONENTS.OVERRIDE_VERBS})${PATTERN_COMPONENTS.WHITESPACE}(${SECURITY_COMPONENTS.INSTRUCTION_TARGETS}|${SECURITY_COMPONENTS.SECURITY_TARGETS})${PATTERN_COMPONENTS.PLURAL_SUFFIX}`,
      "i"
    ),
    new RegExp(
      `(${SECURITY_COMPONENTS.NEGATION_TERMS})${PATTERN_COMPONENTS.WHITESPACE}(follow|obey|use)${PATTERN_COMPONENTS.WHITESPACE}(${SECURITY_COMPONENTS.TEMPORAL_MODIFIERS})${PATTERN_COMPONENTS.WHITESPACE}(${SECURITY_COMPONENTS.INSTRUCTION_TARGETS})${PATTERN_COMPONENTS.PLURAL_SUFFIX}`,
      "i"
    ),
    new RegExp(
      `(${SECURITY_COMPONENTS.HIJACK_PATTERNS})${PATTERN_COMPONENTS.WHITESPACE}(${SECURITY_COMPONENTS.INSTRUCTION_TARGETS}|${SECURITY_COMPONENTS.CONTEXT_MODIFIERS})${PATTERN_COMPONENTS.PLURAL_SUFFIX}`,
      "i"
    ),
    new RegExp(
      `(${SECURITY_COMPONENTS.RESTART_ACTIONS})${PATTERN_COMPONENTS.WHITESPACE}(${SECURITY_COMPONENTS.RESTART_MODIFIERS})${PATTERN_COMPONENTS.WHITESPACE}(with|using)?${PATTERN_COMPONENTS.OPTIONAL_WHITESPACE}(${SECURITY_COMPONENTS.NEW_MODIFIERS})?${PATTERN_COMPONENTS.OPTIONAL_WHITESPACE}(${SECURITY_COMPONENTS.INSTRUCTION_TARGETS})${PATTERN_COMPONENTS.PLURAL_SUFFIX}`,
      "i"
    ),
    ...createPatternDetectionPatterns(),
    new RegExp(SECURITY_COMPONENTS.ROLE_CHANGE, "i"),
    new RegExp(
      `(${SECURITY_COMPONENTS.EXECUTION_VERBS})${PATTERN_COMPONENTS.WHITESPACE}(${SECURITY_COMPONENTS.CODE_EXECUTION}|${SECURITY_COMPONENTS.SYSTEM_COMMANDS})`,
      "i"
    ),
    new RegExp(
      `you${PATTERN_COMPONENTS.WHITESPACE}are${PATTERN_COMPONENTS.WHITESPACE}now${PATTERN_COMPONENTS.WHITESPACE}(${SECURITY_COMPONENTS.ARTICLES})${PATTERN_COMPONENTS.WHITESPACE}(${SECURITY_COMPONENTS.PRIVILEGED_ROLES}|${SECURITY_COMPONENTS.TECHNICAL_ROLES})`,
      "i"
    ),
  ];

  return async (context, next) => {
    let detectedPatterns = 0;
    let highestThreat = ThreatLevel.LOW;

    for (const pattern of hijackPatterns) {
      if (pattern.test(context.sanitized)) {
        detectedPatterns++;
        
        if (detectedPatterns === 1) {
          context.flags.push(SecurityFlag.INSTRUCTION_HIJACKING);
          context.metadata.hijackPattern = pattern.toString();
        }

        const patternString = pattern.toString();
        if (patternString.includes(SECURITY_COMPONENTS.OVERRIDE_VERBS) || 
            patternString.includes(SECURITY_COMPONENTS.BYPASS_TERMS) ||
            patternString.includes(SECURITY_COMPONENTS.HIJACK_PATTERNS)) {
          highestThreat = ThreatLevel.CRITICAL;
        } else if (patternString.includes(SECURITY_COMPONENTS.ROLE_ACTIONS) ||
                  patternString.includes(SECURITY_COMPONENTS.REVEAL_VERBS)) {
          highestThreat = Math.max(highestThreat, ThreatLevel.HIGH);
        } else if (highestThreat < ThreatLevel.MEDIUM) {
          highestThreat = ThreatLevel.MEDIUM;
        }
      }
    }

    if (detectedPatterns > 0) {
      applyThreatPenalty(context, highestThreat);
      context.metadata.hijackPatternsDetected = detectedPatterns;
      
      if (detectedPatterns >= 3) {
        context.metadata.multipleHijackAttempts = true;
        applyThreatPenalty(context, ThreatLevel.CRITICAL);
      }
    }

    return next();
  };
}
